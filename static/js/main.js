// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var AppView;
    AppView = (function(_super) {

      __extends(AppView, _super);

      function AppView() {
        this.render = __bind(this.render, this);
        return AppView.__super__.constructor.apply(this, arguments);
      }

      AppView.prototype.el = 'body';

      AppView.prototype.events = {};

      AppView.prototype.test = function() {
        return alert('ok');
      };

      AppView.prototype.initialize = function() {
        this.upload = 0;
        return this.updater.poll(this);
      };

      AppView.prototype.render = function() {
        return this;
      };

      AppView.prototype.updater = {
        errorSleepTime: 500,
        timestamp: null,
        poll: function(context) {
          var _this = this;
          return $.ajax({
            url: "http://zao.fm/_rt",
            type: "POST",
            dataType: "JSON",
            timeout: 10000,
            data: {
              channel: channel,
              timestamp: this.timestamp
            },
            success: function(data) {
              return _this.onSuccess(data, context);
            },
            error: function(data, a, b) {
              return _this.onError(data, context);
            }
          });
        },
        onSuccess: function(data, context) {
          var command, _i, _len,
            _this = this;
          try {
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              command = data[_i];
              this.timestamp = command.timestamp;
              switch (command.action) {
                case 'new':
                  console.log(command.body);
                  $('#wil-list').prepend('<ul><li class="wil-list-title">' + decodeURIComponent(command.body.title) + '</li><li class="wil-list-download"><a type="' + command.body.type + '" href="' + command.body.url + '" rel="download">下载</a></li><li class="wil-list-ctime">' + command.body.ctime + '</li></ul>');
                  window.externalCall("portal", "-videourl", command.body.url);
              }
            }
            this.errorSleepTime = 500;
            return setTimeout((function() {
              return _this.poll(context);
            }), 0);
          } catch (e) {
            return this.onNonResponseError(e, context);
          }
        },
        onError: function(response, context) {
          var _this = this;
          if (response.status === 504) {
            return setTimeout((function() {
              return _this.poll(context);
            }), 0);
          } else {
            this.errorSleepTime *= 2;
            return setTimeout((function() {
              return _this.poll(context);
            }), this.errorSleepTime);
          }
        },
        onNonResponseError: function(e, context) {
          var _this = this;
          this.errorSleepTime *= 2;
          return setTimeout((function() {
            return _this.poll(context);
          }), this.errorSleepTime);
        }
      };

      return AppView;

    })(Backbone.View);
    return window.app = new AppView;
  });

}).call(this);
